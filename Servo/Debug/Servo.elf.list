
Servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000fe4  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001120  08001120  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08001120  08001120  00011120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001124  08001124  00011124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000024  20000000  08001128  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000003c  20000024  0800114c  00020024  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000060  0800114c  00020060  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
  9 .debug_info   00004e96  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000d1c  00000000  00000000  00024ee3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000728  00000000  00000000  00025c00  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000690  00000000  00000000  00026328  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000022a9  00000000  00000000  000269b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000200e  00000000  00000000  00028c61  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  0002ac6f  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001e3c  00000000  00000000  0002acf0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000024 	.word	0x20000024
 8000158:	00000000 	.word	0x00000000
 800015c:	08001108 	.word	0x08001108

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000028 	.word	0x20000028
 8000178:	08001108 	.word	0x08001108

0800017c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800017c:	b480      	push	{r7}
 800017e:	b085      	sub	sp, #20
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000184:	2300      	movs	r3, #0
 8000186:	73fb      	strb	r3, [r7, #15]
 8000188:	2300      	movs	r3, #0
 800018a:	73bb      	strb	r3, [r7, #14]
 800018c:	230f      	movs	r3, #15
 800018e:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	78db      	ldrb	r3, [r3, #3]
 8000194:	2b00      	cmp	r3, #0
 8000196:	d038      	beq.n	800020a <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000198:	4b26      	ldr	r3, [pc, #152]	; (8000234 <NVIC_Init+0xb8>)
 800019a:	68db      	ldr	r3, [r3, #12]
 800019c:	43db      	mvns	r3, r3
 800019e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80001a2:	0a1b      	lsrs	r3, r3, #8
 80001a4:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80001a6:	7bfb      	ldrb	r3, [r7, #15]
 80001a8:	f1c3 0304 	rsb	r3, r3, #4
 80001ac:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80001ae:	7b7a      	ldrb	r2, [r7, #13]
 80001b0:	7bfb      	ldrb	r3, [r7, #15]
 80001b2:	fa42 f303 	asr.w	r3, r2, r3
 80001b6:	737b      	strb	r3, [r7, #13]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	785b      	ldrb	r3, [r3, #1]
 80001bc:	461a      	mov	r2, r3
 80001be:	7bbb      	ldrb	r3, [r7, #14]
 80001c0:	fa02 f303 	lsl.w	r3, r2, r3
 80001c4:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	789a      	ldrb	r2, [r3, #2]
 80001ca:	7b7b      	ldrb	r3, [r7, #13]
 80001cc:	4013      	ands	r3, r2
 80001ce:	b2da      	uxtb	r2, r3
 80001d0:	7bfb      	ldrb	r3, [r7, #15]
 80001d2:	4313      	orrs	r3, r2
 80001d4:	73fb      	strb	r3, [r7, #15]
    tmppriority = tmppriority << 0x04;
 80001d6:	7bfb      	ldrb	r3, [r7, #15]
 80001d8:	011b      	lsls	r3, r3, #4
 80001da:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80001dc:	4a16      	ldr	r2, [pc, #88]	; (8000238 <NVIC_Init+0xbc>)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	781b      	ldrb	r3, [r3, #0]
 80001e2:	4413      	add	r3, r2
 80001e4:	7bfa      	ldrb	r2, [r7, #15]
 80001e6:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001ea:	4a13      	ldr	r2, [pc, #76]	; (8000238 <NVIC_Init+0xbc>)
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	095b      	lsrs	r3, r3, #5
 80001f2:	b2db      	uxtb	r3, r3
 80001f4:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	781b      	ldrb	r3, [r3, #0]
 80001fa:	f003 031f 	and.w	r3, r3, #31
 80001fe:	2101      	movs	r1, #1
 8000200:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000204:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000208:	e00f      	b.n	800022a <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800020a:	490b      	ldr	r1, [pc, #44]	; (8000238 <NVIC_Init+0xbc>)
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	095b      	lsrs	r3, r3, #5
 8000212:	b2db      	uxtb	r3, r3
 8000214:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	781b      	ldrb	r3, [r3, #0]
 800021a:	f003 031f 	and.w	r3, r3, #31
 800021e:	2201      	movs	r2, #1
 8000220:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000222:	f100 0320 	add.w	r3, r0, #32
 8000226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800022a:	bf00      	nop
 800022c:	3714      	adds	r7, #20
 800022e:	46bd      	mov	sp, r7
 8000230:	bc80      	pop	{r7}
 8000232:	4770      	bx	lr
 8000234:	e000ed00 	.word	0xe000ed00
 8000238:	e000e100 	.word	0xe000e100

0800023c <GPIO_Init>:
  *         peripheral.

  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800023c:	b480      	push	{r7}
 800023e:	b087      	sub	sp, #28
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
 8000244:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000246:	2300      	movs	r3, #0
 8000248:	617b      	str	r3, [r7, #20]
 800024a:	2300      	movs	r3, #0
 800024c:	613b      	str	r3, [r7, #16]
 800024e:	2300      	movs	r3, #0
 8000250:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000252:	2300      	movs	r3, #0
 8000254:	617b      	str	r3, [r7, #20]
 8000256:	e07e      	b.n	8000356 <GPIO_Init+0x11a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000258:	2201      	movs	r2, #1
 800025a:	697b      	ldr	r3, [r7, #20]
 800025c:	fa02 f303 	lsl.w	r3, r2, r3
 8000260:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000262:	683b      	ldr	r3, [r7, #0]
 8000264:	681a      	ldr	r2, [r3, #0]
 8000266:	693b      	ldr	r3, [r7, #16]
 8000268:	4013      	ands	r3, r2
 800026a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800026c:	68fa      	ldr	r2, [r7, #12]
 800026e:	693b      	ldr	r3, [r7, #16]
 8000270:	429a      	cmp	r2, r3
 8000272:	d16d      	bne.n	8000350 <GPIO_Init+0x114>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	681a      	ldr	r2, [r3, #0]
 8000278:	697b      	ldr	r3, [r7, #20]
 800027a:	005b      	lsls	r3, r3, #1
 800027c:	2103      	movs	r1, #3
 800027e:	fa01 f303 	lsl.w	r3, r1, r3
 8000282:	43db      	mvns	r3, r3
 8000284:	401a      	ands	r2, r3
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	681a      	ldr	r2, [r3, #0]
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	791b      	ldrb	r3, [r3, #4]
 8000292:	4619      	mov	r1, r3
 8000294:	697b      	ldr	r3, [r7, #20]
 8000296:	005b      	lsls	r3, r3, #1
 8000298:	fa01 f303 	lsl.w	r3, r1, r3
 800029c:	431a      	orrs	r2, r3
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80002a2:	683b      	ldr	r3, [r7, #0]
 80002a4:	791b      	ldrb	r3, [r3, #4]
 80002a6:	2b01      	cmp	r3, #1
 80002a8:	d003      	beq.n	80002b2 <GPIO_Init+0x76>
 80002aa:	683b      	ldr	r3, [r7, #0]
 80002ac:	791b      	ldrb	r3, [r3, #4]
 80002ae:	2b02      	cmp	r3, #2
 80002b0:	d136      	bne.n	8000320 <GPIO_Init+0xe4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	689a      	ldr	r2, [r3, #8]
 80002b6:	697b      	ldr	r3, [r7, #20]
 80002b8:	005b      	lsls	r3, r3, #1
 80002ba:	2103      	movs	r1, #3
 80002bc:	fa01 f303 	lsl.w	r3, r1, r3
 80002c0:	43db      	mvns	r3, r3
 80002c2:	401a      	ands	r2, r3
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	689a      	ldr	r2, [r3, #8]
 80002cc:	683b      	ldr	r3, [r7, #0]
 80002ce:	795b      	ldrb	r3, [r3, #5]
 80002d0:	4619      	mov	r1, r3
 80002d2:	697b      	ldr	r3, [r7, #20]
 80002d4:	005b      	lsls	r3, r3, #1
 80002d6:	fa01 f303 	lsl.w	r3, r1, r3
 80002da:	431a      	orrs	r2, r3
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	609a      	str	r2, [r3, #8]

        /*Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	889b      	ldrh	r3, [r3, #4]
 80002e4:	b29a      	uxth	r2, r3
 80002e6:	697b      	ldr	r3, [r7, #20]
 80002e8:	b29b      	uxth	r3, r3
 80002ea:	2101      	movs	r1, #1
 80002ec:	fa01 f303 	lsl.w	r3, r1, r3
 80002f0:	b29b      	uxth	r3, r3
 80002f2:	43db      	mvns	r3, r3
 80002f4:	b29b      	uxth	r3, r3
 80002f6:	4013      	ands	r3, r2
 80002f8:	b29a      	uxth	r2, r3
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	889b      	ldrh	r3, [r3, #4]
 8000302:	b29b      	uxth	r3, r3
 8000304:	b21a      	sxth	r2, r3
 8000306:	683b      	ldr	r3, [r7, #0]
 8000308:	799b      	ldrb	r3, [r3, #6]
 800030a:	4619      	mov	r1, r3
 800030c:	697b      	ldr	r3, [r7, #20]
 800030e:	b29b      	uxth	r3, r3
 8000310:	fa01 f303 	lsl.w	r3, r1, r3
 8000314:	b21b      	sxth	r3, r3
 8000316:	4313      	orrs	r3, r2
 8000318:	b21b      	sxth	r3, r3
 800031a:	b29a      	uxth	r2, r3
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	809a      	strh	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	68da      	ldr	r2, [r3, #12]
 8000324:	697b      	ldr	r3, [r7, #20]
 8000326:	b29b      	uxth	r3, r3
 8000328:	005b      	lsls	r3, r3, #1
 800032a:	2103      	movs	r1, #3
 800032c:	fa01 f303 	lsl.w	r3, r1, r3
 8000330:	43db      	mvns	r3, r3
 8000332:	401a      	ands	r2, r3
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	68da      	ldr	r2, [r3, #12]
 800033c:	683b      	ldr	r3, [r7, #0]
 800033e:	79db      	ldrb	r3, [r3, #7]
 8000340:	4619      	mov	r1, r3
 8000342:	697b      	ldr	r3, [r7, #20]
 8000344:	005b      	lsls	r3, r3, #1
 8000346:	fa01 f303 	lsl.w	r3, r1, r3
 800034a:	431a      	orrs	r2, r3
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000350:	697b      	ldr	r3, [r7, #20]
 8000352:	3301      	adds	r3, #1
 8000354:	617b      	str	r3, [r7, #20]
 8000356:	697b      	ldr	r3, [r7, #20]
 8000358:	2b0f      	cmp	r3, #15
 800035a:	f67f af7d 	bls.w	8000258 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 800035e:	bf00      	nop
 8000360:	371c      	adds	r7, #28
 8000362:	46bd      	mov	sp, r7
 8000364:	bc80      	pop	{r7}
 8000366:	4770      	bx	lr

08000368 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: Specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000368:	b480      	push	{r7}
 800036a:	b085      	sub	sp, #20
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
 8000370:	460b      	mov	r3, r1
 8000372:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000374:	2300      	movs	r3, #0
 8000376:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	8a9b      	ldrh	r3, [r3, #20]
 800037c:	b29a      	uxth	r2, r3
 800037e:	887b      	ldrh	r3, [r7, #2]
 8000380:	4013      	ands	r3, r2
 8000382:	b29b      	uxth	r3, r3
 8000384:	2b00      	cmp	r3, #0
 8000386:	d002      	beq.n	800038e <GPIO_ReadOutputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000388:	2301      	movs	r3, #1
 800038a:	73fb      	strb	r3, [r7, #15]
 800038c:	e001      	b.n	8000392 <GPIO_ReadOutputDataBit+0x2a>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800038e:	2300      	movs	r3, #0
 8000390:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000392:	7bfb      	ldrb	r3, [r7, #15]
}
 8000394:	4618      	mov	r0, r3
 8000396:	3714      	adds	r7, #20
 8000398:	46bd      	mov	sp, r7
 800039a:	bc80      	pop	{r7}
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <GPIO_SetBits>:
  *        accesses. In this way, there is no risk of an IRQ occurring between
  *        the read and the modify access.
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
 80003a8:	460b      	mov	r3, r1
 80003aa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRRL = GPIO_Pin;
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	887a      	ldrh	r2, [r7, #2]
 80003b0:	831a      	strh	r2, [r3, #24]
}
 80003b2:	bf00      	nop
 80003b4:	370c      	adds	r7, #12
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bc80      	pop	{r7}
 80003ba:	4770      	bx	lr

080003bc <GPIO_ResetBits>:
  *        accesses. In this way, there is no risk of an IRQ occurring between
  *        the read and the modify access.
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80003bc:	b480      	push	{r7}
 80003be:	b083      	sub	sp, #12
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
 80003c4:	460b      	mov	r3, r1
 80003c6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRRH = GPIO_Pin;
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	887a      	ldrh	r2, [r7, #2]
 80003cc:	835a      	strh	r2, [r3, #26]
}
 80003ce:	bf00      	nop
 80003d0:	370c      	adds	r7, #12
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bc80      	pop	{r7}
 80003d6:	4770      	bx	lr

080003d8 <GPIO_ToggleBits>:
  * @param  GPIOx: where x can be (A..H) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80003d8:	b480      	push	{r7}
 80003da:	b083      	sub	sp, #12
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
 80003e0:	460b      	mov	r3, r1
 80003e2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	8a9b      	ldrh	r3, [r3, #20]
 80003e8:	b29a      	uxth	r2, r3
 80003ea:	887b      	ldrh	r3, [r7, #2]
 80003ec:	4053      	eors	r3, r2
 80003ee:	b29a      	uxth	r2, r3
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	829a      	strh	r2, [r3, #20]
}
 80003f4:	bf00      	nop
 80003f6:	370c      	adds	r7, #12
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bc80      	pop	{r7}
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop

08000400 <GPIO_PinAFConfig>:
  *        alternate function I/O pins.  
  * @note EVENTOUT is not mapped on PH0, PH1 and PH2.  
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000400:	b480      	push	{r7}
 8000402:	b085      	sub	sp, #20
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
 8000408:	460b      	mov	r3, r1
 800040a:	807b      	strh	r3, [r7, #2]
 800040c:	4613      	mov	r3, r2
 800040e:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000410:	2300      	movs	r3, #0
 8000412:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000414:	2300      	movs	r3, #0
 8000416:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000418:	787a      	ldrb	r2, [r7, #1]
 800041a:	887b      	ldrh	r3, [r7, #2]
 800041c:	f003 0307 	and.w	r3, r3, #7
 8000420:	009b      	lsls	r3, r3, #2
 8000422:	fa02 f303 	lsl.w	r3, r2, r3
 8000426:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000428:	887b      	ldrh	r3, [r7, #2]
 800042a:	08db      	lsrs	r3, r3, #3
 800042c:	b29b      	uxth	r3, r3
 800042e:	4618      	mov	r0, r3
 8000430:	887b      	ldrh	r3, [r7, #2]
 8000432:	08db      	lsrs	r3, r3, #3
 8000434:	b29b      	uxth	r3, r3
 8000436:	461a      	mov	r2, r3
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	3208      	adds	r2, #8
 800043c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000440:	887b      	ldrh	r3, [r7, #2]
 8000442:	f003 0307 	and.w	r3, r3, #7
 8000446:	009b      	lsls	r3, r3, #2
 8000448:	210f      	movs	r1, #15
 800044a:	fa01 f303 	lsl.w	r3, r1, r3
 800044e:	43db      	mvns	r3, r3
 8000450:	ea02 0103 	and.w	r1, r2, r3
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	f100 0208 	add.w	r2, r0, #8
 800045a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800045e:	887b      	ldrh	r3, [r7, #2]
 8000460:	08db      	lsrs	r3, r3, #3
 8000462:	b29b      	uxth	r3, r3
 8000464:	461a      	mov	r2, r3
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	3208      	adds	r2, #8
 800046a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	4313      	orrs	r3, r2
 8000472:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000474:	887b      	ldrh	r3, [r7, #2]
 8000476:	08db      	lsrs	r3, r3, #3
 8000478:	b29b      	uxth	r3, r3
 800047a:	461a      	mov	r2, r3
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	3208      	adds	r2, #8
 8000480:	68b9      	ldr	r1, [r7, #8]
 8000482:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000486:	bf00      	nop
 8000488:	3714      	adds	r7, #20
 800048a:	46bd      	mov	sp, r7
 800048c:	bc80      	pop	{r7}
 800048e:	4770      	bx	lr

08000490 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000490:	b480      	push	{r7}
 8000492:	b089      	sub	sp, #36	; 0x24
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmul = 0, plldiv = 0, pllsource = 0, presc = 0, msirange = 0;
 8000498:	2300      	movs	r3, #0
 800049a:	61fb      	str	r3, [r7, #28]
 800049c:	2300      	movs	r3, #0
 800049e:	61bb      	str	r3, [r7, #24]
 80004a0:	2300      	movs	r3, #0
 80004a2:	617b      	str	r3, [r7, #20]
 80004a4:	2300      	movs	r3, #0
 80004a6:	613b      	str	r3, [r7, #16]
 80004a8:	2300      	movs	r3, #0
 80004aa:	60fb      	str	r3, [r7, #12]
 80004ac:	2300      	movs	r3, #0
 80004ae:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80004b0:	4b5f      	ldr	r3, [pc, #380]	; (8000630 <RCC_GetClocksFreq+0x1a0>)
 80004b2:	689b      	ldr	r3, [r3, #8]
 80004b4:	f003 030c 	and.w	r3, r3, #12
 80004b8:	61fb      	str	r3, [r7, #28]
  
  switch (tmp)
 80004ba:	69fb      	ldr	r3, [r7, #28]
 80004bc:	2b0c      	cmp	r3, #12
 80004be:	d865      	bhi.n	800058c <RCC_GetClocksFreq+0xfc>
 80004c0:	a201      	add	r2, pc, #4	; (adr r2, 80004c8 <RCC_GetClocksFreq+0x38>)
 80004c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004c6:	bf00      	nop
 80004c8:	080004fd 	.word	0x080004fd
 80004cc:	0800058d 	.word	0x0800058d
 80004d0:	0800058d 	.word	0x0800058d
 80004d4:	0800058d 	.word	0x0800058d
 80004d8:	0800051d 	.word	0x0800051d
 80004dc:	0800058d 	.word	0x0800058d
 80004e0:	0800058d 	.word	0x0800058d
 80004e4:	0800058d 	.word	0x0800058d
 80004e8:	08000525 	.word	0x08000525
 80004ec:	0800058d 	.word	0x0800058d
 80004f0:	0800058d 	.word	0x0800058d
 80004f4:	0800058d 	.word	0x0800058d
 80004f8:	0800052d 	.word	0x0800052d
  {
    case 0x00:  /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> 13;
 80004fc:	4b4c      	ldr	r3, [pc, #304]	; (8000630 <RCC_GetClocksFreq+0x1a0>)
 80004fe:	685b      	ldr	r3, [r3, #4]
 8000500:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000504:	0b5b      	lsrs	r3, r3, #13
 8000506:	60bb      	str	r3, [r7, #8]
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 8000508:	68bb      	ldr	r3, [r7, #8]
 800050a:	3301      	adds	r3, #1
 800050c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000510:	fa02 f303 	lsl.w	r3, r2, r3
 8000514:	461a      	mov	r2, r3
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	601a      	str	r2, [r3, #0]
      break;
 800051a:	e047      	b.n	80005ac <RCC_GetClocksFreq+0x11c>
    case 0x04:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	4a45      	ldr	r2, [pc, #276]	; (8000634 <RCC_GetClocksFreq+0x1a4>)
 8000520:	601a      	str	r2, [r3, #0]
      break;
 8000522:	e043      	b.n	80005ac <RCC_GetClocksFreq+0x11c>
    case 0x08:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	4a44      	ldr	r2, [pc, #272]	; (8000638 <RCC_GetClocksFreq+0x1a8>)
 8000528:	601a      	str	r2, [r3, #0]
      break;
 800052a:	e03f      	b.n	80005ac <RCC_GetClocksFreq+0x11c>
    case 0x0C:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 800052c:	4b40      	ldr	r3, [pc, #256]	; (8000630 <RCC_GetClocksFreq+0x1a0>)
 800052e:	689b      	ldr	r3, [r3, #8]
 8000530:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000534:	61bb      	str	r3, [r7, #24]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 8000536:	4b3e      	ldr	r3, [pc, #248]	; (8000630 <RCC_GetClocksFreq+0x1a0>)
 8000538:	689b      	ldr	r3, [r3, #8]
 800053a:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800053e:	617b      	str	r3, [r7, #20]
      pllmul = PLLMulTable[(pllmul >> 18)];
 8000540:	69bb      	ldr	r3, [r7, #24]
 8000542:	0c9b      	lsrs	r3, r3, #18
 8000544:	4a3d      	ldr	r2, [pc, #244]	; (800063c <RCC_GetClocksFreq+0x1ac>)
 8000546:	5cd3      	ldrb	r3, [r2, r3]
 8000548:	b2db      	uxtb	r3, r3
 800054a:	61bb      	str	r3, [r7, #24]
      plldiv = (plldiv >> 22) + 1;
 800054c:	697b      	ldr	r3, [r7, #20]
 800054e:	0d9b      	lsrs	r3, r3, #22
 8000550:	3301      	adds	r3, #1
 8000552:	617b      	str	r3, [r7, #20]
      
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000554:	4b36      	ldr	r3, [pc, #216]	; (8000630 <RCC_GetClocksFreq+0x1a0>)
 8000556:	689b      	ldr	r3, [r3, #8]
 8000558:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800055c:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
 800055e:	693b      	ldr	r3, [r7, #16]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d109      	bne.n	8000578 <RCC_GetClocksFreq+0xe8>
      {
        /* HSI oscillator clock selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSI_VALUE) * pllmul) / plldiv);
 8000564:	69bb      	ldr	r3, [r7, #24]
 8000566:	4a33      	ldr	r2, [pc, #204]	; (8000634 <RCC_GetClocksFreq+0x1a4>)
 8000568:	fb02 f203 	mul.w	r2, r2, r3
 800056c:	697b      	ldr	r3, [r7, #20]
 800056e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	601a      	str	r2, [r3, #0]
      else
      {
        /* HSE selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 8000576:	e019      	b.n	80005ac <RCC_GetClocksFreq+0x11c>
        RCC_Clocks->SYSCLK_Frequency = (((HSI_VALUE) * pllmul) / plldiv);
      }
      else
      {
        /* HSE selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
 8000578:	69bb      	ldr	r3, [r7, #24]
 800057a:	4a2f      	ldr	r2, [pc, #188]	; (8000638 <RCC_GetClocksFreq+0x1a8>)
 800057c:	fb02 f203 	mul.w	r2, r2, r3
 8000580:	697b      	ldr	r3, [r7, #20]
 8000582:	fbb2 f2f3 	udiv	r2, r2, r3
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	601a      	str	r2, [r3, #0]
      }
      break;
 800058a:	e00f      	b.n	80005ac <RCC_GetClocksFreq+0x11c>
    default: /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> 13;
 800058c:	4b28      	ldr	r3, [pc, #160]	; (8000630 <RCC_GetClocksFreq+0x1a0>)
 800058e:	685b      	ldr	r3, [r3, #4]
 8000590:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000594:	0b5b      	lsrs	r3, r3, #13
 8000596:	60bb      	str	r3, [r7, #8]
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	3301      	adds	r3, #1
 800059c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80005a0:	fa02 f303 	lsl.w	r3, r2, r3
 80005a4:	461a      	mov	r2, r3
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	601a      	str	r2, [r3, #0]
      break;
 80005aa:	bf00      	nop
  }
  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80005ac:	4b20      	ldr	r3, [pc, #128]	; (8000630 <RCC_GetClocksFreq+0x1a0>)
 80005ae:	689b      	ldr	r3, [r3, #8]
 80005b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80005b4:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 4;
 80005b6:	69fb      	ldr	r3, [r7, #28]
 80005b8:	091b      	lsrs	r3, r3, #4
 80005ba:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp]; 
 80005bc:	4a20      	ldr	r2, [pc, #128]	; (8000640 <RCC_GetClocksFreq+0x1b0>)
 80005be:	69fb      	ldr	r3, [r7, #28]
 80005c0:	4413      	add	r3, r2
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681a      	ldr	r2, [r3, #0]
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	40da      	lsrs	r2, r3
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80005d4:	4b16      	ldr	r3, [pc, #88]	; (8000630 <RCC_GetClocksFreq+0x1a0>)
 80005d6:	689b      	ldr	r3, [r3, #8]
 80005d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80005dc:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 8;
 80005de:	69fb      	ldr	r3, [r7, #28]
 80005e0:	0a1b      	lsrs	r3, r3, #8
 80005e2:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 80005e4:	4a16      	ldr	r2, [pc, #88]	; (8000640 <RCC_GetClocksFreq+0x1b0>)
 80005e6:	69fb      	ldr	r3, [r7, #28]
 80005e8:	4413      	add	r3, r2
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	60fb      	str	r3, [r7, #12]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	685a      	ldr	r2, [r3, #4]
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	40da      	lsrs	r2, r3
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80005fc:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <RCC_GetClocksFreq+0x1a0>)
 80005fe:	689b      	ldr	r3, [r3, #8]
 8000600:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000604:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 11;
 8000606:	69fb      	ldr	r3, [r7, #28]
 8000608:	0adb      	lsrs	r3, r3, #11
 800060a:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 800060c:	4a0c      	ldr	r2, [pc, #48]	; (8000640 <RCC_GetClocksFreq+0x1b0>)
 800060e:	69fb      	ldr	r3, [r7, #28]
 8000610:	4413      	add	r3, r2
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	b2db      	uxtb	r3, r3
 8000616:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	685a      	ldr	r2, [r3, #4]
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	40da      	lsrs	r2, r3
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	60da      	str	r2, [r3, #12]
}
 8000624:	bf00      	nop
 8000626:	3724      	adds	r7, #36	; 0x24
 8000628:	46bd      	mov	sp, r7
 800062a:	bc80      	pop	{r7}
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	40023800 	.word	0x40023800
 8000634:	00f42400 	.word	0x00f42400
 8000638:	007a1200 	.word	0x007a1200
 800063c:	20000000 	.word	0x20000000
 8000640:	2000000c 	.word	0x2000000c

08000644 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	460b      	mov	r3, r1
 800064e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000650:	78fb      	ldrb	r3, [r7, #3]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d006      	beq.n	8000664 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000656:	4909      	ldr	r1, [pc, #36]	; (800067c <RCC_AHBPeriphClockCmd+0x38>)
 8000658:	4b08      	ldr	r3, [pc, #32]	; (800067c <RCC_AHBPeriphClockCmd+0x38>)
 800065a:	69da      	ldr	r2, [r3, #28]
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	4313      	orrs	r3, r2
 8000660:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8000662:	e006      	b.n	8000672 <RCC_AHBPeriphClockCmd+0x2e>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000664:	4905      	ldr	r1, [pc, #20]	; (800067c <RCC_AHBPeriphClockCmd+0x38>)
 8000666:	4b05      	ldr	r3, [pc, #20]	; (800067c <RCC_AHBPeriphClockCmd+0x38>)
 8000668:	69da      	ldr	r2, [r3, #28]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	43db      	mvns	r3, r3
 800066e:	4013      	ands	r3, r2
 8000670:	61cb      	str	r3, [r1, #28]
  }
}
 8000672:	bf00      	nop
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	bc80      	pop	{r7}
 800067a:	4770      	bx	lr
 800067c:	40023800 	.word	0x40023800

08000680 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	460b      	mov	r3, r1
 800068a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800068c:	78fb      	ldrb	r3, [r7, #3]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d006      	beq.n	80006a0 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000692:	4909      	ldr	r1, [pc, #36]	; (80006b8 <RCC_APB2PeriphClockCmd+0x38>)
 8000694:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <RCC_APB2PeriphClockCmd+0x38>)
 8000696:	6a1a      	ldr	r2, [r3, #32]
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	4313      	orrs	r3, r2
 800069c:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800069e:	e006      	b.n	80006ae <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80006a0:	4905      	ldr	r1, [pc, #20]	; (80006b8 <RCC_APB2PeriphClockCmd+0x38>)
 80006a2:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <RCC_APB2PeriphClockCmd+0x38>)
 80006a4:	6a1a      	ldr	r2, [r3, #32]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	43db      	mvns	r3, r3
 80006aa:	4013      	ands	r3, r2
 80006ac:	620b      	str	r3, [r1, #32]
  }
}
 80006ae:	bf00      	nop
 80006b0:	370c      	adds	r7, #12
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bc80      	pop	{r7}
 80006b6:	4770      	bx	lr
 80006b8:	40023800 	.word	0x40023800

080006bc <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 80006bc:	b480      	push	{r7}
 80006be:	b085      	sub	sp, #20
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	881b      	ldrh	r3, [r3, #0]
 80006ce:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 80006d0:	89fb      	ldrh	r3, [r7, #14]
 80006d2:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 80006d6:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	881a      	ldrh	r2, [r3, #0]
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	885b      	ldrh	r3, [r3, #2]
 80006e0:	4313      	orrs	r3, r2
 80006e2:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80006e8:	4313      	orrs	r3, r2
 80006ea:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80006f0:	4313      	orrs	r3, r2
 80006f2:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80006f8:	4313      	orrs	r3, r2
 80006fa:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000700:	4313      	orrs	r3, r2
 8000702:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000708:	4313      	orrs	r3, r2
 800070a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000710:	4313      	orrs	r3, r2
 8000712:	b29a      	uxth	r2, r3
 8000714:	89fb      	ldrh	r3, [r7, #14]
 8000716:	4313      	orrs	r3, r2
 8000718:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	89fa      	ldrh	r2, [r7, #14]
 800071e:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	8b9b      	ldrh	r3, [r3, #28]
 8000724:	b29b      	uxth	r3, r3
 8000726:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800072a:	b29a      	uxth	r2, r3
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	8a1a      	ldrh	r2, [r3, #16]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	821a      	strh	r2, [r3, #16]
}
 8000738:	bf00      	nop
 800073a:	3714      	adds	r7, #20
 800073c:	46bd      	mov	sp, r7
 800073e:	bc80      	pop	{r7}
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop

08000744 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	460b      	mov	r3, r1
 800074e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000750:	78fb      	ldrb	r3, [r7, #3]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d008      	beq.n	8000768 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	881b      	ldrh	r3, [r3, #0]
 800075a:	b29b      	uxth	r3, r3
 800075c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000760:	b29a      	uxth	r2, r3
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
  }
}
 8000766:	e007      	b.n	8000778 <SPI_Cmd+0x34>
    SPIx->CR1 |= SPI_CR1_SPE;
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	881b      	ldrh	r3, [r3, #0]
 800076c:	b29b      	uxth	r3, r3
 800076e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000772:	b29a      	uxth	r2, r3
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	801a      	strh	r2, [r3, #0]
  }
}
 8000778:	bf00      	nop
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	bc80      	pop	{r7}
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop

08000784 <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8000784:	b480      	push	{r7}
 8000786:	b085      	sub	sp, #20
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	460b      	mov	r3, r1
 800078e:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000790:	2300      	movs	r3, #0
 8000792:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	891b      	ldrh	r3, [r3, #8]
 8000798:	b29a      	uxth	r2, r3
 800079a:	887b      	ldrh	r3, [r7, #2]
 800079c:	4013      	ands	r3, r2
 800079e:	b29b      	uxth	r3, r3
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d002      	beq.n	80007aa <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 80007a4:	2301      	movs	r3, #1
 80007a6:	73fb      	strb	r3, [r7, #15]
 80007a8:	e001      	b.n	80007ae <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 80007aa:	2300      	movs	r3, #0
 80007ac:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80007ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3714      	adds	r7, #20
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bc80      	pop	{r7}
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop

080007bc <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for
  *         the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80007bc:	b480      	push	{r7}
 80007be:	b085      	sub	sp, #20
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	881b      	ldrh	r3, [r3, #0]
 80007ce:	81fb      	strh	r3, [r7, #14]

  if(((TIMx) == TIM2) || ((TIMx) == TIM3) || ((TIMx) == TIM4) || ((TIMx) == TIM5))
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007d6:	d00b      	beq.n	80007f0 <TIM_TimeBaseInit+0x34>
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	4a1c      	ldr	r2, [pc, #112]	; (800084c <TIM_TimeBaseInit+0x90>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d007      	beq.n	80007f0 <TIM_TimeBaseInit+0x34>
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	4a1b      	ldr	r2, [pc, #108]	; (8000850 <TIM_TimeBaseInit+0x94>)
 80007e4:	4293      	cmp	r3, r2
 80007e6:	d003      	beq.n	80007f0 <TIM_TimeBaseInit+0x34>
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	4a1a      	ldr	r2, [pc, #104]	; (8000854 <TIM_TimeBaseInit+0x98>)
 80007ec:	4293      	cmp	r3, r2
 80007ee:	d108      	bne.n	8000802 <TIM_TimeBaseInit+0x46>
  {											
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 80007f0:	89fb      	ldrh	r3, [r7, #14]
 80007f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80007f6:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	885a      	ldrh	r2, [r3, #2]
 80007fc:	89fb      	ldrh	r3, [r7, #14]
 80007fe:	4313      	orrs	r3, r2
 8000800:	81fb      	strh	r3, [r7, #14]
  }
 
  if(((TIMx) != TIM6) && ((TIMx) != TIM7))
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	4a14      	ldr	r2, [pc, #80]	; (8000858 <TIM_TimeBaseInit+0x9c>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d00c      	beq.n	8000824 <TIM_TimeBaseInit+0x68>
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	4a13      	ldr	r2, [pc, #76]	; (800085c <TIM_TimeBaseInit+0xa0>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d008      	beq.n	8000824 <TIM_TimeBaseInit+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8000812:	89fb      	ldrh	r3, [r7, #14]
 8000814:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000818:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	891a      	ldrh	r2, [r3, #8]
 800081e:	89fb      	ldrh	r3, [r7, #14]
 8000820:	4313      	orrs	r3, r2
 8000822:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	89fa      	ldrh	r2, [r7, #14]
 8000828:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	685a      	ldr	r2, [r3, #4]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	881a      	ldrh	r2, [r3, #0]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	851a      	strh	r2, [r3, #40]	; 0x28
    
  /* Generate an update event to reload the Prescaler value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	2201      	movs	r2, #1
 800083e:	829a      	strh	r2, [r3, #20]
}
 8000840:	bf00      	nop
 8000842:	3714      	adds	r7, #20
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	40000400 	.word	0x40000400
 8000850:	40000800 	.word	0x40000800
 8000854:	40000c00 	.word	0x40000c00
 8000858:	40001000 	.word	0x40001000
 800085c:	40001400 	.word	0x40001400

08000860 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	460b      	mov	r3, r1
 800086a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800086c:	78fb      	ldrb	r3, [r7, #3]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d008      	beq.n	8000884 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	881b      	ldrh	r3, [r3, #0]
 8000876:	b29b      	uxth	r3, r3
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	b29a      	uxth	r2, r3
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 8000882:	e007      	b.n	8000894 <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	881b      	ldrh	r3, [r3, #0]
 8000888:	b29b      	uxth	r3, r3
 800088a:	f023 0301 	bic.w	r3, r3, #1
 800088e:	b29a      	uxth	r2, r3
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	801a      	strh	r2, [r3, #0]
  }
}
 8000894:	bf00      	nop
 8000896:	370c      	adds	r7, #12
 8000898:	46bd      	mov	sp, r7
 800089a:	bc80      	pop	{r7}
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop

080008a0 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	460b      	mov	r3, r1
 80008aa:	807b      	strh	r3, [r7, #2]
 80008ac:	4613      	mov	r3, r2
 80008ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80008b0:	787b      	ldrb	r3, [r7, #1]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d008      	beq.n	80008c8 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	899b      	ldrh	r3, [r3, #12]
 80008ba:	b29a      	uxth	r2, r3
 80008bc:	887b      	ldrh	r3, [r7, #2]
 80008be:	4313      	orrs	r3, r2
 80008c0:	b29a      	uxth	r2, r3
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 80008c6:	e009      	b.n	80008dc <TIM_ITConfig+0x3c>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	899b      	ldrh	r3, [r3, #12]
 80008cc:	b29a      	uxth	r2, r3
 80008ce:	887b      	ldrh	r3, [r7, #2]
 80008d0:	43db      	mvns	r3, r3
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	4013      	ands	r3, r2
 80008d6:	b29a      	uxth	r2, r3
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	819a      	strh	r2, [r3, #12]
  }
}
 80008dc:	bf00      	nop
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bc80      	pop	{r7}
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop

080008e8 <TIM_GetITStatus>:
  * @note TIM10 and TIM11 can have only update interrupt or TIM_FLAG_CC1
  *     interrupt      
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	460b      	mov	r3, r1
 80008f2:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 80008f4:	2300      	movs	r3, #0
 80008f6:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	81bb      	strh	r3, [r7, #12]
 80008fc:	2300      	movs	r3, #0
 80008fe:	817b      	strh	r3, [r7, #10]
  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	8a1b      	ldrh	r3, [r3, #16]
 8000904:	b29a      	uxth	r2, r3
 8000906:	887b      	ldrh	r3, [r7, #2]
 8000908:	4013      	ands	r3, r2
 800090a:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	899b      	ldrh	r3, [r3, #12]
 8000910:	b29a      	uxth	r2, r3
 8000912:	887b      	ldrh	r3, [r7, #2]
 8000914:	4013      	ands	r3, r2
 8000916:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8000918:	89bb      	ldrh	r3, [r7, #12]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d005      	beq.n	800092a <TIM_GetITStatus+0x42>
 800091e:	897b      	ldrh	r3, [r7, #10]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d002      	beq.n	800092a <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8000924:	2301      	movs	r3, #1
 8000926:	73fb      	strb	r3, [r7, #15]
 8000928:	e001      	b.n	800092e <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 800092a:	2300      	movs	r3, #0
 800092c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800092e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000930:	4618      	mov	r0, r3
 8000932:	3714      	adds	r7, #20
 8000934:	46bd      	mov	sp, r7
 8000936:	bc80      	pop	{r7}
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <TIM_ClearITPendingBit>:
  * @note TIM10 and TIM11 can have only update interrupt or TIM_IT_CC1
  *     interrupt        
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	460b      	mov	r3, r1
 8000946:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
   
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8000948:	887b      	ldrh	r3, [r7, #2]
 800094a:	43db      	mvns	r3, r3
 800094c:	b29a      	uxth	r2, r3
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	821a      	strh	r2, [r3, #16]
}
 8000952:	bf00      	nop
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr

0800095c <initSPI1>:

long Steps = 0;
extern int Speed;

void initSPI1(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b088      	sub	sp, #32
 8000960:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 8000962:	2101      	movs	r1, #1
 8000964:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000968:	f7ff fe8a 	bl	8000680 <RCC_APB2PeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 800096c:	2101      	movs	r1, #1
 800096e:	2001      	movs	r0, #1
 8000970:	f7ff fe68 	bl	8000644 <RCC_AHBPeriphClockCmd>

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8000974:	2302      	movs	r3, #2
 8000976:	773b      	strb	r3, [r7, #28]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000978:	2300      	movs	r3, #0
 800097a:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 800097c:	2303      	movs	r3, #3
 800097e:	777b      	strb	r3, [r7, #29]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	77fb      	strb	r3, [r7, #31]
	//PA5 - SPI1_SCK
	//PA6 - SPI1_MISO
	//PA7 - SPI1_MOSI
	//PA4 - SPI1_NSS (SPI1_CS)

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5|GPIO_Pin_6|GPIO_Pin_7;
 8000984:	23e0      	movs	r3, #224	; 0xe0
 8000986:	61bb      	str	r3, [r7, #24]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000988:	f107 0318 	add.w	r3, r7, #24
 800098c:	4619      	mov	r1, r3
 800098e:	4819      	ldr	r0, [pc, #100]	; (80009f4 <initSPI1+0x98>)
 8000990:	f7ff fc54 	bl	800023c <GPIO_Init>

	//GPIO_PinAFConfig(GPIOA, GPIO_PinSource4, GPIO_AF_SPI1);
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource5, GPIO_AF_SPI1);
 8000994:	2205      	movs	r2, #5
 8000996:	2105      	movs	r1, #5
 8000998:	4816      	ldr	r0, [pc, #88]	; (80009f4 <initSPI1+0x98>)
 800099a:	f7ff fd31 	bl	8000400 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_SPI1);
 800099e:	2205      	movs	r2, #5
 80009a0:	2106      	movs	r1, #6
 80009a2:	4814      	ldr	r0, [pc, #80]	; (80009f4 <initSPI1+0x98>)
 80009a4:	f7ff fd2c 	bl	8000400 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource7, GPIO_AF_SPI1);
 80009a8:	2205      	movs	r2, #5
 80009aa:	2107      	movs	r1, #7
 80009ac:	4811      	ldr	r0, [pc, #68]	; (80009f4 <initSPI1+0x98>)
 80009ae:	f7ff fd27 	bl	8000400 <GPIO_PinAFConfig>

	SPI_InitTypeDef  SPI_InitStructure;
	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_32;
 80009b2:	2320      	movs	r3, #32
 80009b4:	823b      	strh	r3, [r7, #16]
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 80009b6:	2300      	movs	r3, #0
 80009b8:	80bb      	strh	r3, [r7, #4]
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
 80009ba:	2301      	movs	r3, #1
 80009bc:	81bb      	strh	r3, [r7, #12]
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;
 80009be:	2302      	movs	r3, #2
 80009c0:	817b      	strh	r3, [r7, #10]
	SPI_InitStructure.SPI_CRCPolynomial = SPI_CRC_Rx;
 80009c2:	2301      	movs	r3, #1
 80009c4:	82bb      	strh	r3, [r7, #20]
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 80009c6:	2300      	movs	r3, #0
 80009c8:	813b      	strh	r3, [r7, #8]
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 80009ca:	2300      	movs	r3, #0
 80009cc:	827b      	strh	r3, [r7, #18]
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 80009ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009d2:	81fb      	strh	r3, [r7, #14]
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 80009d4:	f44f 7382 	mov.w	r3, #260	; 0x104
 80009d8:	80fb      	strh	r3, [r7, #6]


	/* Apply SPI configuration after enabling it */
	SPI_Init(SPI1, &SPI_InitStructure);
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	4619      	mov	r1, r3
 80009de:	4806      	ldr	r0, [pc, #24]	; (80009f8 <initSPI1+0x9c>)
 80009e0:	f7ff fe6c 	bl	80006bc <SPI_Init>
	/* SPI Peripheral Enable */
	SPI_Cmd(SPI1, ENABLE);
 80009e4:	2101      	movs	r1, #1
 80009e6:	4804      	ldr	r0, [pc, #16]	; (80009f8 <initSPI1+0x9c>)
 80009e8:	f7ff feac 	bl	8000744 <SPI_Cmd>
}
 80009ec:	bf00      	nop
 80009ee:	3720      	adds	r7, #32
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40020000 	.word	0x40020000
 80009f8:	40013000 	.word	0x40013000

080009fc <initCS_Pin>:

void initCS_Pin(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8000a02:	2101      	movs	r1, #1
 8000a04:	2002      	movs	r0, #2
 8000a06:	f7ff fe1d 	bl	8000644 <RCC_AHBPeriphClockCmd>

	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8000a0e:	2303      	movs	r3, #3
 8000a10:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
 8000a16:	2340      	movs	r3, #64	; 0x40
 8000a18:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	713b      	strb	r3, [r7, #4]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000a1e:	463b      	mov	r3, r7
 8000a20:	4619      	mov	r1, r3
 8000a22:	4803      	ldr	r0, [pc, #12]	; (8000a30 <initCS_Pin+0x34>)
 8000a24:	f7ff fc0a 	bl	800023c <GPIO_Init>
}
 8000a28:	bf00      	nop
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40020400 	.word	0x40020400

08000a34 <initRST_Pin>:

void initRST_Pin(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8000a3a:	2101      	movs	r1, #1
 8000a3c:	2001      	movs	r0, #1
 8000a3e:	f7ff fe01 	bl	8000644 <RCC_AHBPeriphClockCmd>

	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000a42:	2300      	movs	r3, #0
 8000a44:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8000a46:	2303      	movs	r3, #3
 8000a48:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 8000a4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a52:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000a54:	2301      	movs	r3, #1
 8000a56:	713b      	strb	r3, [r7, #4]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000a58:	463b      	mov	r3, r7
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4803      	ldr	r0, [pc, #12]	; (8000a6c <initRST_Pin+0x38>)
 8000a5e:	f7ff fbed 	bl	800023c <GPIO_Init>
}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40020000 	.word	0x40020000

08000a70 <initPWM1_Pin>:

void initPWM1_Pin(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 8000a76:	2101      	movs	r1, #1
 8000a78:	2004      	movs	r0, #4
 8000a7a:	f7ff fde3 	bl	8000644 <RCC_AHBPeriphClockCmd>

	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8000a82:	2303      	movs	r3, #3
 8000a84:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
 8000a8a:	2380      	movs	r3, #128	; 0x80
 8000a8c:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	713b      	strb	r3, [r7, #4]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000a92:	463b      	mov	r3, r7
 8000a94:	4619      	mov	r1, r3
 8000a96:	4803      	ldr	r0, [pc, #12]	; (8000aa4 <initPWM1_Pin+0x34>)
 8000a98:	f7ff fbd0 	bl	800023c <GPIO_Init>
}
 8000a9c:	bf00      	nop
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40020800 	.word	0x40020800

08000aa8 <initDIR1_Pin>:

void initDIR1_Pin(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8000aae:	2101      	movs	r1, #1
 8000ab0:	2001      	movs	r0, #1
 8000ab2:	f7ff fdc7 	bl	8000644 <RCC_AHBPeriphClockCmd>

	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8000aba:	2303      	movs	r3, #3
 8000abc:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
 8000ac2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ac6:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	713b      	strb	r3, [r7, #4]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000acc:	463b      	mov	r3, r7
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4803      	ldr	r0, [pc, #12]	; (8000ae0 <initDIR1_Pin+0x38>)
 8000ad2:	f7ff fbb3 	bl	800023c <GPIO_Init>
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40020000 	.word	0x40020000

08000ae4 <setDir>:

void setDir(int dir){
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
	if(dir == 1){
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d105      	bne.n	8000afe <setDir+0x1a>
		GPIO_SetBits(GPIOA, GPIO_Pin_8);
 8000af2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000af6:	4806      	ldr	r0, [pc, #24]	; (8000b10 <setDir+0x2c>)
 8000af8:	f7ff fc52 	bl	80003a0 <GPIO_SetBits>
	}else{
		GPIO_ResetBits(GPIOA, GPIO_Pin_8);
	}
}
 8000afc:	e004      	b.n	8000b08 <setDir+0x24>

void setDir(int dir){
	if(dir == 1){
		GPIO_SetBits(GPIOA, GPIO_Pin_8);
	}else{
		GPIO_ResetBits(GPIOA, GPIO_Pin_8);
 8000afe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b02:	4803      	ldr	r0, [pc, #12]	; (8000b10 <setDir+0x2c>)
 8000b04:	f7ff fc5a 	bl	80003bc <GPIO_ResetBits>
	}
}
 8000b08:	bf00      	nop
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40020000 	.word	0x40020000

08000b14 <set_RST_Pin>:

void set_RST_Pin(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
	GPIOA->BSRRL = GPIO_Pin_9;
 8000b18:	4b03      	ldr	r3, [pc, #12]	; (8000b28 <set_RST_Pin+0x14>)
 8000b1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b1e:	831a      	strh	r2, [r3, #24]

}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr
 8000b28:	40020000 	.word	0x40020000

08000b2c <WriteSPI1>:

uint8_t  WriteSPI1(uint8_t  txAddr, uint8_t  txData)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	460a      	mov	r2, r1
 8000b36:	71fb      	strb	r3, [r7, #7]
 8000b38:	4613      	mov	r3, r2
 8000b3a:	71bb      	strb	r3, [r7, #6]

 uint8_t rxData;

 device_Select();
 8000b3c:	f000 f93e 	bl	8000dbc <device_Select>

 SPI1->DR = txAddr;
 8000b40:	4b1d      	ldr	r3, [pc, #116]	; (8000bb8 <WriteSPI1+0x8c>)
 8000b42:	79fa      	ldrb	r2, [r7, #7]
 8000b44:	b292      	uxth	r2, r2
 8000b46:	819a      	strh	r2, [r3, #12]
 // wait until TXE = 1
 while(SPI_I2S_GetFlagStatus(SPI1,SPI_I2S_FLAG_TXE) != SET);
 8000b48:	bf00      	nop
 8000b4a:	2102      	movs	r1, #2
 8000b4c:	481a      	ldr	r0, [pc, #104]	; (8000bb8 <WriteSPI1+0x8c>)
 8000b4e:	f7ff fe19 	bl	8000784 <SPI_I2S_GetFlagStatus>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d1f8      	bne.n	8000b4a <WriteSPI1+0x1e>
 // wait until RXNE = 1
 while(SPI_I2S_GetFlagStatus(SPI1,SPI_I2S_FLAG_RXNE) != SET);
 8000b58:	bf00      	nop
 8000b5a:	2101      	movs	r1, #1
 8000b5c:	4816      	ldr	r0, [pc, #88]	; (8000bb8 <WriteSPI1+0x8c>)
 8000b5e:	f7ff fe11 	bl	8000784 <SPI_I2S_GetFlagStatus>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d1f8      	bne.n	8000b5a <WriteSPI1+0x2e>
 // read the rx buff to clear the RXNE flag (garbage)
 rxData = SPI1->DR;
 8000b68:	4b13      	ldr	r3, [pc, #76]	; (8000bb8 <WriteSPI1+0x8c>)
 8000b6a:	899b      	ldrh	r3, [r3, #12]
 8000b6c:	b29b      	uxth	r3, r3
 8000b6e:	73fb      	strb	r3, [r7, #15]

 device_Unselect();
 8000b70:	f000 f930 	bl	8000dd4 <device_Unselect>
 //Delay(0);
 device_Select();
 8000b74:	f000 f922 	bl	8000dbc <device_Select>

 SPI1->DR = txData;
 8000b78:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <WriteSPI1+0x8c>)
 8000b7a:	79ba      	ldrb	r2, [r7, #6]
 8000b7c:	b292      	uxth	r2, r2
 8000b7e:	819a      	strh	r2, [r3, #12]
 // wait until TXE = 1
 while(SPI_I2S_GetFlagStatus(SPI1,SPI_I2S_FLAG_TXE) != SET);
 8000b80:	bf00      	nop
 8000b82:	2102      	movs	r1, #2
 8000b84:	480c      	ldr	r0, [pc, #48]	; (8000bb8 <WriteSPI1+0x8c>)
 8000b86:	f7ff fdfd 	bl	8000784 <SPI_I2S_GetFlagStatus>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d1f8      	bne.n	8000b82 <WriteSPI1+0x56>
 // wait until RXNE = 1
 while(SPI_I2S_GetFlagStatus(SPI1,SPI_I2S_FLAG_RXNE) != SET);
 8000b90:	bf00      	nop
 8000b92:	2101      	movs	r1, #1
 8000b94:	4808      	ldr	r0, [pc, #32]	; (8000bb8 <WriteSPI1+0x8c>)
 8000b96:	f7ff fdf5 	bl	8000784 <SPI_I2S_GetFlagStatus>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d1f8      	bne.n	8000b92 <WriteSPI1+0x66>
 // read the rx buff to clear the RXNE flag (garbage)
 rxData = SPI1->DR;
 8000ba0:	4b05      	ldr	r3, [pc, #20]	; (8000bb8 <WriteSPI1+0x8c>)
 8000ba2:	899b      	ldrh	r3, [r3, #12]
 8000ba4:	b29b      	uxth	r3, r3
 8000ba6:	73fb      	strb	r3, [r7, #15]

 device_Unselect();
 8000ba8:	f000 f914 	bl	8000dd4 <device_Unselect>
 //Delay(0);

 return rxData;
 8000bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3710      	adds	r7, #16
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40013000 	.word	0x40013000

08000bbc <EnableDisable>:

 return rxData;
}

uint8_t EnableDisable(int state)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]

 uint16_t  rxData;
 uint16_t  txData;

 if(state == 1){
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d102      	bne.n	8000bd0 <EnableDisable+0x14>
  txData = 0b10111000;//enable
 8000bca:	23b8      	movs	r3, #184	; 0xb8
 8000bcc:	81fb      	strh	r3, [r7, #14]
 8000bce:	e001      	b.n	8000bd4 <EnableDisable+0x18>
 }else{
  txData = 0b10101000;//disable
 8000bd0:	23a8      	movs	r3, #168	; 0xa8
 8000bd2:	81fb      	strh	r3, [r7, #14]
 }

 device_Select();
 8000bd4:	f000 f8f2 	bl	8000dbc <device_Select>


 SPI1->DR = txData;
 8000bd8:	4a0e      	ldr	r2, [pc, #56]	; (8000c14 <EnableDisable+0x58>)
 8000bda:	89fb      	ldrh	r3, [r7, #14]
 8000bdc:	8193      	strh	r3, [r2, #12]
 //wait until TXE = 1;
 while(SPI_I2S_GetFlagStatus(SPI1,SPI_I2S_FLAG_TXE) != SET);
 8000bde:	bf00      	nop
 8000be0:	2102      	movs	r1, #2
 8000be2:	480c      	ldr	r0, [pc, #48]	; (8000c14 <EnableDisable+0x58>)
 8000be4:	f7ff fdce 	bl	8000784 <SPI_I2S_GetFlagStatus>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d1f8      	bne.n	8000be0 <EnableDisable+0x24>
 //wait until RXNE = 1
 while(SPI_I2S_GetFlagStatus(SPI1,SPI_I2S_FLAG_RXNE) != SET);
 8000bee:	bf00      	nop
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	4808      	ldr	r0, [pc, #32]	; (8000c14 <EnableDisable+0x58>)
 8000bf4:	f7ff fdc6 	bl	8000784 <SPI_I2S_GetFlagStatus>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d1f8      	bne.n	8000bf0 <EnableDisable+0x34>
 //read the rx buff to clear the RXNE flag (garbage)
 rxData = SPI1->DR;
 8000bfe:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <EnableDisable+0x58>)
 8000c00:	899b      	ldrh	r3, [r3, #12]
 8000c02:	81bb      	strh	r3, [r7, #12]

 device_Unselect();
 8000c04:	f000 f8e6 	bl	8000dd4 <device_Unselect>
 //Delay(0);

 return rxData;
 8000c08:	89bb      	ldrh	r3, [r7, #12]
 8000c0a:	b2db      	uxtb	r3, r3
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3710      	adds	r7, #16
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40013000 	.word	0x40013000

08000c18 <Timer9_Initialize>:

void Timer9_Initialize(int period){
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]

	RCC_GetClocksFreq(&RCC_Clocks);
 8000c20:	481d      	ldr	r0, [pc, #116]	; (8000c98 <Timer9_Initialize+0x80>)
 8000c22:	f7ff fc35 	bl	8000490 <RCC_GetClocksFreq>

	/* TIM9 clock enable */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM9, ENABLE);
 8000c26:	2101      	movs	r1, #1
 8000c28:	2004      	movs	r0, #4
 8000c2a:	f7ff fd29 	bl	8000680 <RCC_APB2PeriphClockCmd>
	/* Time base configuration */
	TIM_9_TimeBaseStructure.TIM_Period = period - 1;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	3b01      	subs	r3, #1
 8000c32:	461a      	mov	r2, r3
 8000c34:	4b19      	ldr	r3, [pc, #100]	; (8000c9c <Timer9_Initialize+0x84>)
 8000c36:	605a      	str	r2, [r3, #4]
	TIM_9_TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.PCLK2_Frequency/1000000) - 1;
 8000c38:	4b17      	ldr	r3, [pc, #92]	; (8000c98 <Timer9_Initialize+0x80>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	4a18      	ldr	r2, [pc, #96]	; (8000ca0 <Timer9_Initialize+0x88>)
 8000c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c42:	0c9b      	lsrs	r3, r3, #18
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	3b01      	subs	r3, #1
 8000c48:	b29a      	uxth	r2, r3
 8000c4a:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <Timer9_Initialize+0x84>)
 8000c4c:	801a      	strh	r2, [r3, #0]
	TIM_9_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8000c4e:	4b13      	ldr	r3, [pc, #76]	; (8000c9c <Timer9_Initialize+0x84>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	811a      	strh	r2, [r3, #8]
	TIM_9_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8000c54:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <Timer9_Initialize+0x84>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	805a      	strh	r2, [r3, #2]
	TIM_TimeBaseInit(TIM9, &TIM_9_TimeBaseStructure);
 8000c5a:	4910      	ldr	r1, [pc, #64]	; (8000c9c <Timer9_Initialize+0x84>)
 8000c5c:	4811      	ldr	r0, [pc, #68]	; (8000ca4 <Timer9_Initialize+0x8c>)
 8000c5e:	f7ff fdad 	bl	80007bc <TIM_TimeBaseInit>
	TIM_Cmd(TIM9, ENABLE);
 8000c62:	2101      	movs	r1, #1
 8000c64:	480f      	ldr	r0, [pc, #60]	; (8000ca4 <Timer9_Initialize+0x8c>)
 8000c66:	f7ff fdfb 	bl	8000860 <TIM_Cmd>
	TIM_ITConfig(TIM9, TIM_IT_Update, ENABLE);
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	480d      	ldr	r0, [pc, #52]	; (8000ca4 <Timer9_Initialize+0x8c>)
 8000c70:	f7ff fe16 	bl	80008a0 <TIM_ITConfig>

	NVIC_InitTypeDef nvicStructure;
	nvicStructure.NVIC_IRQChannel = TIM9_IRQn;
 8000c74:	2319      	movs	r3, #25
 8000c76:	733b      	strb	r3, [r7, #12]
	nvicStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	737b      	strb	r3, [r7, #13]
	nvicStructure.NVIC_IRQChannelSubPriority = 1;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	73bb      	strb	r3, [r7, #14]
	nvicStructure.NVIC_IRQChannelCmd = ENABLE;
 8000c80:	2301      	movs	r3, #1
 8000c82:	73fb      	strb	r3, [r7, #15]
	NVIC_Init(&nvicStructure);
 8000c84:	f107 030c 	add.w	r3, r7, #12
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff fa77 	bl	800017c <NVIC_Init>

}
 8000c8e:	bf00      	nop
 8000c90:	3710      	adds	r7, #16
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20000050 	.word	0x20000050
 8000c9c:	20000044 	.word	0x20000044
 8000ca0:	431bde83 	.word	0x431bde83
 8000ca4:	40010800 	.word	0x40010800

08000ca8 <EasyStepper>:

void EasyStepper(void){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0

	GPIO_ToggleBits(GPIOC, GPIO_Pin_7);//PWM Generation
 8000cac:	2180      	movs	r1, #128	; 0x80
 8000cae:	482a      	ldr	r0, [pc, #168]	; (8000d58 <EasyStepper+0xb0>)
 8000cb0:	f7ff fb92 	bl	80003d8 <GPIO_ToggleBits>

	if(GPIO_ReadOutputDataBit(GPIOA, GPIO_Pin_8)){
 8000cb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cb8:	4828      	ldr	r0, [pc, #160]	; (8000d5c <EasyStepper+0xb4>)
 8000cba:	f7ff fb55 	bl	8000368 <GPIO_ReadOutputDataBit>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d005      	beq.n	8000cd0 <EasyStepper+0x28>
		Steps++;
 8000cc4:	4b26      	ldr	r3, [pc, #152]	; (8000d60 <EasyStepper+0xb8>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	4a25      	ldr	r2, [pc, #148]	; (8000d60 <EasyStepper+0xb8>)
 8000ccc:	6013      	str	r3, [r2, #0]
 8000cce:	e004      	b.n	8000cda <EasyStepper+0x32>
	}else{
		Steps--;
 8000cd0:	4b23      	ldr	r3, [pc, #140]	; (8000d60 <EasyStepper+0xb8>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	3b01      	subs	r3, #1
 8000cd6:	4a22      	ldr	r2, [pc, #136]	; (8000d60 <EasyStepper+0xb8>)
 8000cd8:	6013      	str	r3, [r2, #0]
	}

	if(Steps >= 1600*2){
 8000cda:	4b21      	ldr	r3, [pc, #132]	; (8000d60 <EasyStepper+0xb8>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8000ce2:	db04      	blt.n	8000cee <EasyStepper+0x46>
		GPIO_ToggleBits(GPIOA, GPIO_Pin_8);
 8000ce4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ce8:	481c      	ldr	r0, [pc, #112]	; (8000d5c <EasyStepper+0xb4>)
 8000cea:	f7ff fb75 	bl	80003d8 <GPIO_ToggleBits>
	}
	if(Steps == 0){
 8000cee:	4b1c      	ldr	r3, [pc, #112]	; (8000d60 <EasyStepper+0xb8>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d104      	bne.n	8000d00 <EasyStepper+0x58>
		GPIO_ToggleBits(GPIOA, GPIO_Pin_8);
 8000cf6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cfa:	4818      	ldr	r0, [pc, #96]	; (8000d5c <EasyStepper+0xb4>)
 8000cfc:	f7ff fb6c 	bl	80003d8 <GPIO_ToggleBits>
	}

	if(Steps >= 1600*2 || Steps <= 0){
 8000d00:	4b17      	ldr	r3, [pc, #92]	; (8000d60 <EasyStepper+0xb8>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8000d08:	da03      	bge.n	8000d12 <EasyStepper+0x6a>
 8000d0a:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <EasyStepper+0xb8>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	dc07      	bgt.n	8000d22 <EasyStepper+0x7a>
		Speed = 200;
 8000d12:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <EasyStepper+0xbc>)
 8000d14:	22c8      	movs	r2, #200	; 0xc8
 8000d16:	601a      	str	r2, [r3, #0]
		Timer9_Config(Speed);
 8000d18:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <EasyStepper+0xbc>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f000 f825 	bl	8000d6c <Timer9_Config>
	}

	if(!(Steps%50)){
 8000d22:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <EasyStepper+0xb8>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <EasyStepper+0xc0>)
 8000d28:	fb83 1302 	smull	r1, r3, r3, r2
 8000d2c:	1119      	asrs	r1, r3, #4
 8000d2e:	17d3      	asrs	r3, r2, #31
 8000d30:	1acb      	subs	r3, r1, r3
 8000d32:	2132      	movs	r1, #50	; 0x32
 8000d34:	fb01 f303 	mul.w	r3, r1, r3
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d109      	bne.n	8000d52 <EasyStepper+0xaa>
		Speed -=1;
 8000d3e:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <EasyStepper+0xbc>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	3b01      	subs	r3, #1
 8000d44:	4a07      	ldr	r2, [pc, #28]	; (8000d64 <EasyStepper+0xbc>)
 8000d46:	6013      	str	r3, [r2, #0]
		Timer9_Config(Speed);
 8000d48:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <EasyStepper+0xbc>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f000 f80d 	bl	8000d6c <Timer9_Config>
	}
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40020800 	.word	0x40020800
 8000d5c:	40020000 	.word	0x40020000
 8000d60:	20000040 	.word	0x20000040
 8000d64:	2000001c 	.word	0x2000001c
 8000d68:	51eb851f 	.word	0x51eb851f

08000d6c <Timer9_Config>:

void Timer9_Config(int period){
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
	RCC_GetClocksFreq(&RCC_Clocks);
 8000d74:	480d      	ldr	r0, [pc, #52]	; (8000dac <Timer9_Config+0x40>)
 8000d76:	f7ff fb8b 	bl	8000490 <RCC_GetClocksFreq>
	TIM_9_TimeBaseStructure.TIM_Period = period - 1;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	3b01      	subs	r3, #1
 8000d7e:	461a      	mov	r2, r3
 8000d80:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <Timer9_Config+0x44>)
 8000d82:	605a      	str	r2, [r3, #4]
	TIM_9_TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.PCLK2_Frequency/1000000) - 1;
 8000d84:	4b09      	ldr	r3, [pc, #36]	; (8000dac <Timer9_Config+0x40>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	4a0a      	ldr	r2, [pc, #40]	; (8000db4 <Timer9_Config+0x48>)
 8000d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d8e:	0c9b      	lsrs	r3, r3, #18
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	3b01      	subs	r3, #1
 8000d94:	b29a      	uxth	r2, r3
 8000d96:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <Timer9_Config+0x44>)
 8000d98:	801a      	strh	r2, [r3, #0]
	TIM_TimeBaseInit(TIM9, &TIM_9_TimeBaseStructure);
 8000d9a:	4905      	ldr	r1, [pc, #20]	; (8000db0 <Timer9_Config+0x44>)
 8000d9c:	4806      	ldr	r0, [pc, #24]	; (8000db8 <Timer9_Config+0x4c>)
 8000d9e:	f7ff fd0d 	bl	80007bc <TIM_TimeBaseInit>
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000050 	.word	0x20000050
 8000db0:	20000044 	.word	0x20000044
 8000db4:	431bde83 	.word	0x431bde83
 8000db8:	40010800 	.word	0x40010800

08000dbc <device_Select>:
	TIM_Cmd(TIM9, ENABLE);
	TIM_ITConfig(TIM9, TIM_IT_Update, ENABLE);
}

void device_Select(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
	GPIOB->BSRRH = GPIO_Pin_6;
 8000dc0:	4b03      	ldr	r3, [pc, #12]	; (8000dd0 <device_Select+0x14>)
 8000dc2:	2240      	movs	r2, #64	; 0x40
 8000dc4:	835a      	strh	r2, [r3, #26]
}
 8000dc6:	bf00      	nop
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bc80      	pop	{r7}
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	40020400 	.word	0x40020400

08000dd4 <device_Unselect>:

void device_Unselect(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
	GPIOB->BSRRL = GPIO_Pin_6;
 8000dd8:	4b03      	ldr	r3, [pc, #12]	; (8000de8 <device_Unselect+0x14>)
 8000dda:	2240      	movs	r2, #64	; 0x40
 8000ddc:	831a      	strh	r2, [r3, #24]
}
 8000dde:	bf00      	nop
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bc80      	pop	{r7}
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	40020400 	.word	0x40020400

08000dec <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  SystemInit();
 8000df0:	f000 f8a0 	bl	8000f34 <SystemInit>
  initSPI1();
 8000df4:	f7ff fdb2 	bl	800095c <initSPI1>

  initCS_Pin(); // chip select pin
 8000df8:	f7ff fe00 	bl	80009fc <initCS_Pin>

  initRST_Pin();
 8000dfc:	f7ff fe1a 	bl	8000a34 <initRST_Pin>
  set_RST_Pin();
 8000e00:	f7ff fe88 	bl	8000b14 <set_RST_Pin>

  device_Unselect();
 8000e04:	f7ff ffe6 	bl	8000dd4 <device_Unselect>
  */

  /* TODO - Add your application code here */


  EnableDisable(0);
 8000e08:	2000      	movs	r0, #0
 8000e0a:	f7ff fed7 	bl	8000bbc <EnableDisable>
  WriteSPI1(0x09, 0b00000101);//adresa,data Tval:5x31.25mA
 8000e0e:	2105      	movs	r1, #5
 8000e10:	2009      	movs	r0, #9
 8000e12:	f7ff fe8b 	bl	8000b2c <WriteSPI1>
  WriteSPI1(0x16, 0b10001000 | (krokovanie & 0b111));//Step mode el pos: 7(000), step mode: full(000)
 8000e16:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <main+0x68>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	b25b      	sxtb	r3, r3
 8000e1c:	f003 0307 	and.w	r3, r3, #7
 8000e20:	b25b      	sxtb	r3, r3
 8000e22:	f063 0377 	orn	r3, r3, #119	; 0x77
 8000e26:	b25b      	sxtb	r3, r3
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	2016      	movs	r0, #22
 8000e2e:	f7ff fe7d 	bl	8000b2c <WriteSPI1>
  EnableDisable(1);
 8000e32:	2001      	movs	r0, #1
 8000e34:	f7ff fec2 	bl	8000bbc <EnableDisable>

  initDIR1_Pin();
 8000e38:	f7ff fe36 	bl	8000aa8 <initDIR1_Pin>
  setDir(1);
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	f7ff fe51 	bl	8000ae4 <setDir>
  initPWM1_Pin();
 8000e42:	f7ff fe15 	bl	8000a70 <initPWM1_Pin>
  Timer9_Initialize(Speed); // us
 8000e46:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <main+0x6c>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff fee4 	bl	8000c18 <Timer9_Initialize>
//		  }
//	  }

	  //rxData = ReadSPI1(0x09);
	  //rxData = ReadSPI1(0x16);
  }
 8000e50:	e7fe      	b.n	8000e50 <main+0x64>
 8000e52:	bf00      	nop
 8000e54:	20000020 	.word	0x20000020
 8000e58:	2000001c 	.word	0x2000001c

08000e5c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e94 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000e60:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000e62:	e003      	b.n	8000e6c <LoopCopyDataInit>

08000e64 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000e64:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <LoopFillZerobss+0x18>)
  ldr r3, [r3, r1]
 8000e66:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000e68:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000e6a:	3104      	adds	r1, #4

08000e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000e6c:	480b      	ldr	r0, [pc, #44]	; (8000e9c <LoopFillZerobss+0x1c>)
  ldr r3, =_edata
 8000e6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <LoopFillZerobss+0x20>)
  adds r2, r0, r1
 8000e70:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000e72:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000e74:	d3f6      	bcc.n	8000e64 <CopyDataInit>
  ldr r2, =_sbss
 8000e76:	4a0b      	ldr	r2, [pc, #44]	; (8000ea4 <LoopFillZerobss+0x24>)
  b LoopFillZerobss
 8000e78:	e002      	b.n	8000e80 <LoopFillZerobss>

08000e7a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000e7a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000e7c:	f842 3b04 	str.w	r3, [r2], #4

08000e80 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000e80:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <LoopFillZerobss+0x28>)
  cmp r2, r3
 8000e82:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000e84:	d3f9      	bcc.n	8000e7a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e86:	f000 f855 	bl	8000f34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e8a:	f000 f917 	bl	80010bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e8e:	f7ff ffad 	bl	8000dec <main>
  bx lr
 8000e92:	4770      	bx	lr

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e94:	20014000 	.word	0x20014000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8000e98:	08001128 	.word	0x08001128
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8000e9c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000ea0:	20000024 	.word	0x20000024
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 8000ea4:	20000024 	.word	0x20000024
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8000ea8:	20000060 	.word	0x20000060

08000eac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000eac:	e7fe      	b.n	8000eac <ADC1_IRQHandler>
	...

08000eb0 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bc80      	pop	{r7}
 8000eba:	4770      	bx	lr

08000ebc <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000ec0:	e7fe      	b.n	8000ec0 <HardFault_Handler+0x4>
 8000ec2:	bf00      	nop

08000ec4 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8000ec8:	e7fe      	b.n	8000ec8 <MemManage_Handler+0x4>
 8000eca:	bf00      	nop

08000ecc <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8000ed0:	e7fe      	b.n	8000ed0 <BusFault_Handler+0x4>
 8000ed2:	bf00      	nop

08000ed4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8000ed8:	e7fe      	b.n	8000ed8 <UsageFault_Handler+0x4>
 8000eda:	bf00      	nop

08000edc <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bc80      	pop	{r7}
 8000ee6:	4770      	bx	lr

08000ee8 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr

08000ef4 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr

08000f00 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
	/*  TimingDelay_Decrement(); */
#ifdef USE_STM32L_DISCOVERY
  TimingDelay_Decrement();
#endif
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr

08000f0c <TIM9_IRQHandler>:
  * @brief  This function handles PPP interrupt request.
  * @param  None
  * @retval None
  */
void TIM9_IRQHandler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(TIM9, TIM_IT_Update) != RESET){
 8000f10:	2101      	movs	r1, #1
 8000f12:	4807      	ldr	r0, [pc, #28]	; (8000f30 <TIM9_IRQHandler+0x24>)
 8000f14:	f7ff fce8 	bl	80008e8 <TIM_GetITStatus>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d005      	beq.n	8000f2a <TIM9_IRQHandler+0x1e>

		EasyStepper();
 8000f1e:	f7ff fec3 	bl	8000ca8 <EasyStepper>

		TIM_ClearITPendingBit(TIM9, TIM_IT_Update);
 8000f22:	2101      	movs	r1, #1
 8000f24:	4802      	ldr	r0, [pc, #8]	; (8000f30 <TIM9_IRQHandler+0x24>)
 8000f26:	f7ff fd09 	bl	800093c <TIM_ClearITPendingBit>
	}
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40010800 	.word	0x40010800

08000f34 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8000f38:	4a15      	ldr	r2, [pc, #84]	; (8000f90 <SystemInit+0x5c>)
 8000f3a:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <SystemInit+0x5c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f42:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8000f44:	4912      	ldr	r1, [pc, #72]	; (8000f90 <SystemInit+0x5c>)
 8000f46:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <SystemInit+0x5c>)
 8000f48:	689a      	ldr	r2, [r3, #8]
 8000f4a:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <SystemInit+0x60>)
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8000f50:	4a0f      	ldr	r2, [pc, #60]	; (8000f90 <SystemInit+0x5c>)
 8000f52:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <SystemInit+0x5c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8000f5a:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8000f5e:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000f60:	4a0b      	ldr	r2, [pc, #44]	; (8000f90 <SystemInit+0x5c>)
 8000f62:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <SystemInit+0x5c>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f6a:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8000f6c:	4a08      	ldr	r2, [pc, #32]	; (8000f90 <SystemInit+0x5c>)
 8000f6e:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <SystemInit+0x5c>)
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8000f76:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000f78:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <SystemInit+0x5c>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	60da      	str	r2, [r3, #12]
#ifdef DATA_IN_ExtSRAM
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
    
  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 8000f7e:	f000 f80d 	bl	8000f9c <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000f82:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <SystemInit+0x64>)
 8000f84:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f88:	609a      	str	r2, [r3, #8]
#endif
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40023800 	.word	0x40023800
 8000f94:	88ffc00c 	.word	0x88ffc00c
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	607b      	str	r3, [r7, #4]
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000faa:	4a41      	ldr	r2, [pc, #260]	; (80010b0 <SetSysClock+0x114>)
 8000fac:	4b40      	ldr	r3, [pc, #256]	; (80010b0 <SetSysClock+0x114>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fb4:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000fb6:	4b3e      	ldr	r3, [pc, #248]	; (80010b0 <SetSysClock+0x114>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fbe:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d103      	bne.n	8000fd4 <SetSysClock+0x38>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000fd2:	d1f0      	bne.n	8000fb6 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000fd4:	4b36      	ldr	r3, [pc, #216]	; (80010b0 <SetSysClock+0x114>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d002      	beq.n	8000fe6 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	603b      	str	r3, [r7, #0]
 8000fe4:	e001      	b.n	8000fea <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	603b      	str	r3, [r7, #0]
  }
  
  if (HSEStatus == (uint32_t)0x01)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d15a      	bne.n	80010a6 <SetSysClock+0x10a>
  {
    /* Enable 64-bit access */
    FLASH->ACR |= FLASH_ACR_ACC64;
 8000ff0:	4a30      	ldr	r2, [pc, #192]	; (80010b4 <SetSysClock+0x118>)
 8000ff2:	4b30      	ldr	r3, [pc, #192]	; (80010b4 <SetSysClock+0x118>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f043 0304 	orr.w	r3, r3, #4
 8000ffa:	6013      	str	r3, [r2, #0]
    
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 8000ffc:	4a2d      	ldr	r2, [pc, #180]	; (80010b4 <SetSysClock+0x118>)
 8000ffe:	4b2d      	ldr	r3, [pc, #180]	; (80010b4 <SetSysClock+0x118>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f043 0302 	orr.w	r3, r3, #2
 8001006:	6013      	str	r3, [r2, #0]

    /* Flash 1 wait state */
    FLASH->ACR |= FLASH_ACR_LATENCY;
 8001008:	4a2a      	ldr	r2, [pc, #168]	; (80010b4 <SetSysClock+0x118>)
 800100a:	4b2a      	ldr	r3, [pc, #168]	; (80010b4 <SetSysClock+0x118>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f043 0301 	orr.w	r3, r3, #1
 8001012:	6013      	str	r3, [r2, #0]
    
    /* Power enable */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001014:	4a26      	ldr	r2, [pc, #152]	; (80010b0 <SetSysClock+0x114>)
 8001016:	4b26      	ldr	r3, [pc, #152]	; (80010b0 <SetSysClock+0x114>)
 8001018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800101a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800101e:	6253      	str	r3, [r2, #36]	; 0x24
  
    /* Select the Voltage Range 1 (1.8 V) */
    PWR->CR = PWR_CR_VOS_0;
 8001020:	4b25      	ldr	r3, [pc, #148]	; (80010b8 <SetSysClock+0x11c>)
 8001022:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001026:	601a      	str	r2, [r3, #0]
  
    /* Wait Until the Voltage Regulator is ready */
    while((PWR->CSR & PWR_CSR_VOSF) != RESET)
 8001028:	bf00      	nop
 800102a:	4b23      	ldr	r3, [pc, #140]	; (80010b8 <SetSysClock+0x11c>)
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f003 0310 	and.w	r3, r3, #16
 8001032:	2b00      	cmp	r3, #0
 8001034:	d1f9      	bne.n	800102a <SetSysClock+0x8e>
    {
    }
        
    /* HCLK = SYSCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001036:	4a1e      	ldr	r2, [pc, #120]	; (80010b0 <SetSysClock+0x114>)
 8001038:	4b1d      	ldr	r3, [pc, #116]	; (80010b0 <SetSysClock+0x114>)
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	6093      	str	r3, [r2, #8]
  
    /* PCLK2 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800103e:	4a1c      	ldr	r2, [pc, #112]	; (80010b0 <SetSysClock+0x114>)
 8001040:	4b1b      	ldr	r3, [pc, #108]	; (80010b0 <SetSysClock+0x114>)
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 8001046:	4a1a      	ldr	r2, [pc, #104]	; (80010b0 <SetSysClock+0x114>)
 8001048:	4b19      	ldr	r3, [pc, #100]	; (80010b0 <SetSysClock+0x114>)
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	6093      	str	r3, [r2, #8]
    
    /*  PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL |
 800104e:	4a18      	ldr	r2, [pc, #96]	; (80010b0 <SetSysClock+0x114>)
 8001050:	4b17      	ldr	r3, [pc, #92]	; (80010b0 <SetSysClock+0x114>)
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8001058:	6093      	str	r3, [r2, #8]
                                        RCC_CFGR_PLLDIV));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMUL12 | RCC_CFGR_PLLDIV3);
 800105a:	4a15      	ldr	r2, [pc, #84]	; (80010b0 <SetSysClock+0x114>)
 800105c:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <SetSysClock+0x114>)
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	f443 0311 	orr.w	r3, r3, #9502720	; 0x910000
 8001064:	6093      	str	r3, [r2, #8]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001066:	4a12      	ldr	r2, [pc, #72]	; (80010b0 <SetSysClock+0x114>)
 8001068:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <SetSysClock+0x114>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001070:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001072:	bf00      	nop
 8001074:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <SetSysClock+0x114>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800107c:	2b00      	cmp	r3, #0
 800107e:	d0f9      	beq.n	8001074 <SetSysClock+0xd8>
    {
    }
        
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001080:	4a0b      	ldr	r2, [pc, #44]	; (80010b0 <SetSysClock+0x114>)
 8001082:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <SetSysClock+0x114>)
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	f023 0303 	bic.w	r3, r3, #3
 800108a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 800108c:	4a08      	ldr	r2, [pc, #32]	; (80010b0 <SetSysClock+0x114>)
 800108e:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <SetSysClock+0x114>)
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	f043 0303 	orr.w	r3, r3, #3
 8001096:	6093      	str	r3, [r2, #8]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8001098:	bf00      	nop
 800109a:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <SetSysClock+0x114>)
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	f003 030c 	and.w	r3, r3, #12
 80010a2:	2b0c      	cmp	r3, #12
 80010a4:	d1f9      	bne.n	800109a <SetSysClock+0xfe>
  else
  {
    /* If HSE fails to start-up, the application will have wrong clock
       configuration. User can add here some code to deal with this error */
  }
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr
 80010b0:	40023800 	.word	0x40023800
 80010b4:	40023c00 	.word	0x40023c00
 80010b8:	40007000 	.word	0x40007000

080010bc <__libc_init_array>:
 80010bc:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <__libc_init_array+0x3c>)
 80010be:	b570      	push	{r4, r5, r6, lr}
 80010c0:	461e      	mov	r6, r3
 80010c2:	4c0e      	ldr	r4, [pc, #56]	; (80010fc <__libc_init_array+0x40>)
 80010c4:	2500      	movs	r5, #0
 80010c6:	1ae4      	subs	r4, r4, r3
 80010c8:	10a4      	asrs	r4, r4, #2
 80010ca:	42a5      	cmp	r5, r4
 80010cc:	d004      	beq.n	80010d8 <__libc_init_array+0x1c>
 80010ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80010d2:	4798      	blx	r3
 80010d4:	3501      	adds	r5, #1
 80010d6:	e7f8      	b.n	80010ca <__libc_init_array+0xe>
 80010d8:	f000 f816 	bl	8001108 <_init>
 80010dc:	4b08      	ldr	r3, [pc, #32]	; (8001100 <__libc_init_array+0x44>)
 80010de:	4c09      	ldr	r4, [pc, #36]	; (8001104 <__libc_init_array+0x48>)
 80010e0:	461e      	mov	r6, r3
 80010e2:	1ae4      	subs	r4, r4, r3
 80010e4:	10a4      	asrs	r4, r4, #2
 80010e6:	2500      	movs	r5, #0
 80010e8:	42a5      	cmp	r5, r4
 80010ea:	d004      	beq.n	80010f6 <__libc_init_array+0x3a>
 80010ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80010f0:	4798      	blx	r3
 80010f2:	3501      	adds	r5, #1
 80010f4:	e7f8      	b.n	80010e8 <__libc_init_array+0x2c>
 80010f6:	bd70      	pop	{r4, r5, r6, pc}
 80010f8:	08001120 	.word	0x08001120
 80010fc:	08001120 	.word	0x08001120
 8001100:	08001120 	.word	0x08001120
 8001104:	08001124 	.word	0x08001124

08001108 <_init>:
 8001108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800110a:	bf00      	nop
 800110c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800110e:	bc08      	pop	{r3}
 8001110:	469e      	mov	lr, r3
 8001112:	4770      	bx	lr

08001114 <_fini>:
 8001114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001116:	bf00      	nop
 8001118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800111a:	bc08      	pop	{r3}
 800111c:	469e      	mov	lr, r3
 800111e:	4770      	bx	lr
